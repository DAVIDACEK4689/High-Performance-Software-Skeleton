cmake_minimum_required (VERSION 3.8)
cmake_policy(SET CMP0076 NEW)

set(THREADS_PREFER_PTHREAD_FLAG True)
find_package(Threads REQUIRED)

find_package(Doxygen)

if(DOXYGEN_FOUND)
	message("DOXYGEN found.")
	function(FLUSH_DOXYGEN)
		message("DOXY_FILES = ${DOXY_FILES}")
		set(DOXYGEN_EXCLUDE_SYMBOLS "*::impl::*")
		set(DOXYGEN_SHOW_NAMESPACES "YES")
		set(DOXYGEN_WARN_IF_UNDOCUMENTED "NO")
		doxygen_add_docs("doxygen" "${DOXY_FILES}" WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}")
	endfunction()
else()
	function(FLUSH_DOXYGEN)
	endfunction()
endif()

set(DOXY_FILES "")

function(TARGET_DOXYGEN TARGET FILE)
	set(DOXY_FILES "${DOXY_FILES};${CMAKE_CURRENT_SOURCE_DIR}/${FILE}" PARENT_SCOPE)
endfunction()

if(UNIX)
	function(CPUFLAG VNAME FLAG)
		if(NOT DEFINED ${VNAME})
			message("Searching /proc/cpuinfo for ${FLAG}")
			execute_process(COMMAND grep "-c" "^flags.*${FLAG}" "/proc/cpuinfo" OUTPUT_VARIABLE CNT)
			if (${CNT} GREATER 0)
				set(HAS True)
			else()
				set(HAS False)
			endif()
			set(${VNAME} ${HAS} CACHE BOOL "CPU has ${FLAG}")
		endif()
	endfunction()

	CPUFLAG(USE_AVX "avx2")
	CPUFLAG(USE_AVXFMA "fma")
	CPUFLAG(USE_AVX512 "avx512f")
	CPUFLAG(USE_AVX512DQ "avx512dq")
	CPUFLAG(USE_AVX512CD "avx512cd")
	CPUFLAG(USE_AVX512BW "avx512bw")
	CPUFLAG(USE_AVX512VL "avx512vl")
else()
	# use only definitions from the command-line
	if(NOT DEFINED USE_AVX)
		set(USE_AVX True CACHE BOOL "Use AVX2 instruction set")
		message("USE_AVX was not defined, defaulting to ${USE_AVX}")
	endif()
	if(NOT DEFINED USE_AVXFMA)
		set(USE_AVXFMA True CACHE BOOL "Use FMA instruction set")
		message("USE_AVXFMA was not defined, defaulting to ${USE_AVXFMA}")
	endif()
	if(NOT DEFINED USE_AVX512)
		set(USE_AVX512 False CACHE BOOL "Use AVX512F instruction set")
		message("USE_AVX512 was not defined, defaulting to ${USE_AVX512}")
	endif()
	if(NOT DEFINED USE_AVX512DQ)
		set(USE_AVX512DQ False CACHE BOOL "Use AVX512DQ instruction set")
		message("USE_AVX512DQ was not defined, defaulting to ${USE_AVX512DQ}")
	endif()
	if(NOT DEFINED USE_AVX512CD)
		set(USE_AVX512CD False CACHE BOOL "Use AVX512CD instruction set")
		message("USE_AVX512CD was not defined, defaulting to ${USE_AVX512CD}")
	endif()
	if(NOT DEFINED USE_AVX512BW)
		set(USE_AVX512BW False CACHE BOOL "Use AVX512BW instruction set")
		message("USE_AVX512BW was not defined, defaulting to ${USE_AVX512BW}")
	endif()
	if(NOT DEFINED USE_AVX512VL)
		set(USE_AVX512VL False CACHE BOOL "Use AVX512VL instruction set")
		message("USE_AVX512VL was not defined, defaulting to ${USE_AVX512VL}")
	endif()
endif()

message("CMAKE_CXX_COMPILER_ID = ${CMAKE_CXX_COMPILER_ID}")
message("MSVC = ${MSVC}")
message("USE_AVX = ${USE_AVX}")
message("USE_AVXFMA = ${USE_AVXFMA}")
message("USE_AVX512 = ${USE_AVX512}")
message("USE_AVX512DQ = ${USE_AVX512DQ}")
message("USE_AVX512CD = ${USE_AVX512CD}")
message("USE_AVX512BW = ${USE_AVX512BW}")
message("USE_AVX512VL = ${USE_AVX512VL}")

function(SET_TARGET_OPTIONS TARGET OPT_GCC OPT_MSVC)
	if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
		target_compile_options(${TARGET} PUBLIC ${OPT_MSVC})
	elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
	    if(${MSVC})
			target_compile_options(${TARGET} PUBLIC "/clang:${OPT_GCC}")
		else()
			target_compile_options(${TARGET} PUBLIC ${OPT_GCC})
		endif()
	else()
		target_compile_options(${TARGET} PUBLIC ${OPT_GCC})
	endif()
endfunction()

function(MAKE_ONE_TARGET TARGET ENABLE_AVX ENABLE_AVXFMA ENABLE_AVX512 ENABLE_AVX512DQ ENABLE_AVX512CD ENABLE_AVX512BW ENABLE_AVX512VL)
	add_executable(${TARGET})
	add_test(run-${TARGET} ${TARGET} ${ARGN})
	set_property(TARGET ${TARGET} PROPERTY CXX_STANDARD 20)
	if(NOT CMAKE_BUILD_TYPE STREQUAL "Debug")
		SET_TARGET_OPTIONS(${TARGET} "-Ofast" "/Ox")
	endif()
	SET_TARGET_OPTIONS(${TARGET} "-msse4.2" "")
	if(ENABLE_AVX)
		SET_TARGET_OPTIONS(${TARGET} "-mavx2" "/arch:AVX2")
		target_compile_definitions(${TARGET} PUBLIC "USE_AVX")
	endif()
	if(ENABLE_AVXFMA)
		SET_TARGET_OPTIONS(${TARGET} "-mfma" "")
		target_compile_definitions(${TARGET} PUBLIC "USE_AVXFMA")
	endif()
	if(ENABLE_AVX512)
		SET_TARGET_OPTIONS(${TARGET} "-mavx512cd" "/arch:AVX512")		# MSVC AVX512 includes CD/BW/DQ/VL 
		target_compile_definitions(${TARGET} PUBLIC "USE_AVX512")
	endif()
	if(ENABLE_AVX512DQ)
		SET_TARGET_OPTIONS(${TARGET} "-mavx512dq" "")		# MSVC AVX512 includes CD/BW/DQ/VL 
		target_compile_definitions(${TARGET} PUBLIC "USE_AVX512DQ")
	endif()
	if(ENABLE_AVX512CD)
		SET_TARGET_OPTIONS(${TARGET} "-mavx512cd" "")		# MSVC AVX512 includes CD/BW/DQ/VL 
		target_compile_definitions(${TARGET} PUBLIC "USE_AVX512CD")
	endif()
	if(ENABLE_AVX512BW)
		SET_TARGET_OPTIONS(${TARGET} "-mavx512bw" "")		# MSVC AVX512 includes CD/BW/DQ/VL 
		target_compile_definitions(${TARGET} PUBLIC "USE_AVX512BW")
	endif()
	if(ENABLE_AVX512VL)
		SET_TARGET_OPTIONS(${TARGET} "-mavx512vl" "")		# MSVC AVX512 includes CD/BW/DQ/VL 
		target_compile_definitions(${TARGET} PUBLIC "USE_AVX512VL")
	endif()
	target_link_libraries(${TARGET} Threads::Threads)
endfunction()

function(MAKE_TARGET TARGET_MACRO_SUFFIX TARGET)
	set("TARGET_${TARGET_MACRO_SUFFIX}" "${TARGET}" PARENT_SCOPE)
	MAKE_ONE_TARGET("${TARGET}" "${USE_AVX}" "${USE_AVXFMA}" "${USE_AVX512}" "${USE_AVX512DQ}" "${USE_AVX512CD}" "${USE_AVX512BW}" "${USE_AVX512VL}")
	if(USE_AVX512)
		# degraded AVX2-only version
		set("TARGET_${TARGET_MACRO_SUFFIX}_AVX" "${TARGET}-avx" PARENT_SCOPE)
		MAKE_ONE_TARGET("${TARGET}-avx" "${USE_AVX}" "${USE_AVXFMA}" "False" "False" "False" "False" "False")
	endif()
	if(USE_AVX)
		# degraded SSE-only version
		set("TARGET_${TARGET_MACRO_SUFFIX}_SSE" "${TARGET}-sse" PARENT_SCOPE)
		MAKE_ONE_TARGET("${TARGET}-sse" "False" "False" "False" "False" "False" "False" "False")
	endif()
endfunction()

function(TARGET_INCLUDE_DIRECTORY TARGET FILE)
	target_include_directories("${TARGET}" PUBLIC "${FILE}")
	if(USE_AVX512)
		# degraded AVX2-only version
		target_include_directories("${TARGET}-avx" PUBLIC "${FILE}")
	endif()
	if(USE_AVX)
		# degraded SSE-only version
		target_include_directories("${TARGET}-sse" PUBLIC "${FILE}")
	endif()
endfunction()

function(TARGET_SOURCE TARGET FILE)
	target_sources("${TARGET}" PUBLIC "${FILE}")
	if(USE_AVX512)
		# degraded AVX2-only version
		target_sources("${TARGET}-avx" PUBLIC "${FILE}")
	endif()
	if(USE_AVX)
		# degraded SSE-only version
		target_sources("${TARGET}-sse" PUBLIC "${FILE}")
	endif()
endfunction()


if(NOT DEFINED GOLD_SUFFIX)
	if(DEFINED ENV{SLURM_JOB_PARTITION})
		string(REGEX REPLACE "-[^-]*$" "" MACHINE_NAME $ENV{SLURM_JOB_PARTITION})
		set(GOLD_SUFFIX "-${MACHINE_NAME}" CACHE STRING "Gold file suffix")
		message("Using gold time file suffix ${GOLD_SUFFIX}")
	else()
		set(GOLD_SUFFIX "" CACHE STRING "Gold file suffix")
		message("Unregistered machine")
	endif()
endif()

function(ONE_TARGET_GOLD_SOURCE TARGET PREFIX PLATFORM_SUFFIX)
	#message("CMAKE_BUILD_TYPE=\"${CMAKE_BUILD_TYPE}\"")
	if(CMAKE_BUILD_TYPE MATCHES "^(Debug|)$")
		message("Using gold check file ${PREFIX}debug.cpp")
		target_sources(${TARGET} PUBLIC "${PREFIX}debug.cpp")
	else()
		message("Using gold check file ${PREFIX}.cpp")
		target_sources(${TARGET} PUBLIC "${PREFIX}.cpp")
		if(${GOLD_SUFFIX} MATCHES "[a-zA-Z0-9]+")
			message("Using gold time file ${PREFIX}${PLATFORM_SUFFIX}${GOLD_SUFFIX}.cpp")
			target_sources(${TARGET} PUBLIC "${PREFIX}${PLATFORM_SUFFIX}${GOLD_SUFFIX}.cpp")
		endif()
	endif()
endfunction()

function(TARGET_GOLD_SOURCE TARGET PREFIX)
	ONE_TARGET_GOLD_SOURCE("${TARGET}" "${PREFIX}" "")
	if(USE_AVX512)
		# degraded AVX2-only version
		ONE_TARGET_GOLD_SOURCE("${TARGET}-avx" "${PREFIX}" "-avx")
	endif()
	if(USE_AVX)
		# degraded SSE-only version
		ONE_TARGET_GOLD_SOURCE("${TARGET}-sse" "${PREFIX}" "-sse")
	endif()
endfunction()
